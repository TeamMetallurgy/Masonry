buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

repositories {
  /*maven {
    name = "JEI maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }*/
}

version = "${minecraft_version}-${mod_version}"
group = "com.teammetallurgy.masonry"
archivesBaseName = "masonry"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20200514-1.16'

    runs {
        client {
            workingDirectory project.file('run')
            mods {
                masonry {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            mods {
                masonry {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', 'masonry', '--all', '--output', file('src/generated/resources/')

            mods {
                masonry {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    //runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Version": "${version}"
        ])
    }
}

processResources {
    // Minifies all .json files when building the mod.
	// Source files are not minified, only the jar copies.
	doLast {
	    def jsonMinifyStart = System.currentTimeMillis()
	    def jsonMinified = 0
		def jsonBytesSaved = 0
		
	    fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}
		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}